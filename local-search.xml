<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PROPAGATION_NESTED 和 PROPAGATION_REQUIRES_NEW 的使用</title>
    <link href="/2022/05/23/transaction/"/>
    <url>/2022/05/23/transaction/</url>
    
    <content type="html"><![CDATA[<h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><ul><li>编程式事务：使用 TransactionTemplate 来完成</li><li>声明式事务：通过 AOP 来完成，一般推荐使用声明式事务</li></ul><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><ol><li>以 AOP 的方式完成事务</li><li>在配置文件中声明</li><li>通过@Transactional注解的方式，便可以将事务规则应用到业务逻辑中</li><li>最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别</li></ol><h2 id="Transactional-的参数"><a href="#Transactional-的参数" class="headerlink" title="@Transactional 的参数"></a>@Transactional 的参数</h2><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>propagation</td><td>枚举型：Propagation</td><td>可选的传播性设置</td></tr><tr><td>isolation</td><td>枚举型：Isolation</td><td>可选的隔离性级别（默认值：ISOLATION_DEFAULT）</td></tr><tr><td>readOnly</td><td>布尔型</td><td>读写型事务 vs. 只读型事务</td></tr><tr><td>timeout</td><td>int型（以秒为单位）</td><td>事务超时</td></tr><tr><td>rollbackFor</td><td>一组Class类的实例，必须是Throwable的子类</td><td>一组异常类，遇到时必须进行回滚。默认情况下 checked exceptions不进行回滚，仅unchecked exceptions（即RuntimeException的子类）才进行事务回滚。</td></tr><tr><td>rollbackForClassname</td><td>一组Class类的名字，必须是Throwable的子类</td><td>一组异常类名，遇到时必须进行回滚</td></tr><tr><td>noRollbackFor</td><td>一组Class类的实例，必须是Throwable的子类</td><td>一组异常类，遇到时必须不回滚。</td></tr><tr><td>noRollbackForClassname</td><td>一组Class类的名字，必须是Throwable的子类</td><td>一组异常类，遇到时必须不回滚</td></tr></tbody></table><h2 id="传播行为-isolation"><a href="#传播行为-isolation" class="headerlink" title="传播行为 isolation"></a>传播行为 isolation</h2><p>当多个事务同时存在的时候，spring如何处理这些事务的行为。</p><p>个别事务需要捕获异常的，使用try-catch来捕获异常，即在try块中调用子事务</p><h3 id="ROPAGATION-REQUIRED"><a href="#ROPAGATION-REQUIRED" class="headerlink" title="ROPAGATION_REQUIRED"></a>ROPAGATION_REQUIRED</h3><ul><li>如果没有事务，则创建一个新事务</li><li>如果存在事务，则加入该事务</li><li>默认事务</li></ul><h3 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a>PROPAGATION_REQUIRES_NEW</h3><ul><li>无论存不存在事务，都创建新事务</li><li>如果方法已运行在一个事务中，则原有事务被挂起，新的事务被创建，直到方法结束，新事务才结束，原先的事务才会恢复执行</li><li>内层事务因为创建了一个新的事务，所以数据与外层事务不一致</li></ul><h3 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a>PROPAGATION_SUPPORTS</h3><ul><li>如果没有事务，就以非事务执行</li><li>如果存在事务，则加入该事务</li></ul><h3 id="PROPAGATION-NOT-SUPPORTED"><a href="#PROPAGATION-NOT-SUPPORTED" class="headerlink" title="PROPAGATION_NOT_SUPPORTED"></a>PROPAGATION_NOT_SUPPORTED</h3><ul><li>以非事务方式执行操作</li><li>如果存在事务，则把当前事务挂起</li></ul><h3 id="PROPAGATION-MANDATORY"><a href="#PROPAGATION-MANDATORY" class="headerlink" title="PROPAGATION_MANDATORY"></a>PROPAGATION_MANDATORY</h3><ul><li>如果当前没有事务，则抛出异常</li><li>如果存在事务，则加入该事务</li></ul><h3 id="PROPAGATION-NEVER"><a href="#PROPAGATION-NEVER" class="headerlink" title="PROPAGATION_NEVER"></a>PROPAGATION_NEVER</h3><ul><li>以非事务方式执行</li><li>如果当前存在事务，则抛出异常</li></ul><h3 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h3><ul><li>如果没有事务，则按REQUIRED属性执行</li><li>如果存在事务，则在嵌套事务内执行</li></ul><h2 id="事务不生效的情况"><a href="#事务不生效的情况" class="headerlink" title="事务不生效的情况"></a>事务不生效的情况</h2><ul><li>数据库不支持事务<ul><li>如：MySQL的mylsam引擎不支持，而innodb支持</li></ul></li><li>没有配置事务管理器</li><li>Service类没有被Spring管理<ul><li>如：没标注@Service</li></ul></li><li>没有事务的方法调用有事务的方法</li><li>非RuntimeException<ul><li>默认支持的是RuntimeException，只有发生该异常时或该子类异常时才回滚</li><li>手动抛出非运行时异常也不会回滚</li><li>如果需要解决这个问题，通过设置@Transactional的 rollbackFor 属性即可</li></ul></li><li>方法不是public</li><li>多线程<ul><li>如：子线程抛异常，主线程无法捕获，导致事务不生效</li></ul></li><li>被捕获了，又没有抛出来<ul><li>正常情况下，需要try-catch来捕获，然后在catch块或finally块中抛出运行时异常</li></ul></li><li>final 方法<ul><li>AOP无法重写该方法，从而添加事务功能</li></ul></li></ul><p>通常来说，for循环内调用带有事务的方法，若想事务之间不受影响，for循环调用的事务方法可以加上REQUIRES_NEW</p><p>注意：传播行为基于事务，如果是controller调用事务方法，则不一定起效，必须是事务方法通过容器调用事务方法，使得事务生效才行</p><h3 id="REQUIRES-NEW-和-NESTED-的测试"><a href="#REQUIRES-NEW-和-NESTED-的测试" class="headerlink" title="REQUIRES_NEW 和 NESTED 的测试"></a>REQUIRES_NEW 和 NESTED 的测试</h3><p>测试例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span> &#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  ... setter getter<br>&#125;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOutter</span><span class="hljs-params">(Entity entity)</span> &#123;<br>    dao.save(entity);<br>&#125;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-comment">// @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="hljs-comment">// @Transactional(propagation = Propagation.NESTED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveInner</span><span class="hljs-params">(Entity entity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;inner2&quot;</span>.equals(entity.getName())) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;抛出内部异常&quot;</span>);<br>    &#125;<br>    dao.save(entity);<br>&#125;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSave</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 模拟从容器获取Service</span><br>    <span class="hljs-comment">// 不能直接调用同个类的方法，需要通过注入的bean去调用，这样才受spring的控制</span><br>    <span class="hljs-type">EntityService</span> <span class="hljs-variable">entityService</span> <span class="hljs-operator">=</span>  SpringContextUtil.getBean(EntityService.class);<br><br>    <span class="hljs-type">Entity</span> <span class="hljs-variable">outter1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entity</span>();<br>    outter1.setName(<span class="hljs-string">&quot;outter1&quot;</span>);<br>    entityService.saveOutter(outter1);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-type">Entity</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entity</span>();<br>        inner.setName(<span class="hljs-string">&quot;inner&quot;</span> + i);<br>        <span class="hljs-comment">// try &#123;</span><br>            entityService.saveInner(inner);<br>        <span class="hljs-comment">// &#125; catch (Exception ignored) &#123;&#125;</span><br>    &#125;<br>    <span class="hljs-comment">// if(true) &#123;</span><br>    <span class="hljs-comment">//     throw new RuntimeException(&quot;抛出外出异常&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-type">Entity</span> <span class="hljs-variable">outter2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entity</span>();<br>    outter2.setName(<span class="hljs-string">&quot;outter2&quot;</span>);<br>    entityService.saveOutter(outter2);<br>&#125;<br></code></pre></td></tr></table></figure><p>例子代码说明：一共需要保存5个实体：outter1、inner1、inner2、inner3、outter2，其中保存inner2时抛出内部异常，保存outter2前抛出外部异常</p><p>实验结果：</p><table><thead><tr><th>条件 \ 对象</th><th>outter1</th><th>inner1</th><th>inner2</th><th>inner3</th><th>outter2</th><th>运行结果</th></tr></thead><tbody><tr><td>无传播行为</td><td>x</td><td>x</td><td>x</td><td>x</td><td>x</td><td>抛出内部异常</td></tr><tr><td>无传播行为+catch内部异常</td><td>x</td><td>x</td><td>x</td><td>x</td><td>x</td><td>rollback-only异常</td></tr><tr><td>REQUIRES_NEW</td><td>x</td><td>o</td><td>x</td><td>x</td><td>x</td><td>抛出内部异常</td></tr><tr><td>REQUIRES_NEW+捕获内部异常</td><td>o</td><td>o</td><td>x</td><td>o</td><td>o</td><td>运行结束</td></tr><tr><td>REQUIRES_NEW+捕获内部异常+抛出外部异常</td><td>x</td><td>o</td><td>x</td><td>o</td><td>x</td><td>抛出外部异常</td></tr><tr><td>NESTED</td><td>x</td><td>x</td><td>x</td><td>x</td><td>x</td><td>抛出内部异常<br>（因为是同一事务，故一起回滚）</td></tr><tr><td>NESTED+捕获内部异常</td><td>o</td><td>o</td><td>x</td><td>o</td><td>o</td><td>运行结束</td></tr></tbody></table><p>总结：</p><table><thead><tr><th></th><th>REQUIRED</th><th>REQUIRES_NEW</th><th>NESTED</th></tr></thead><tbody><tr><td>外层正常，内层正常</td><td>一起提交</td><td>内层先提交，外层再提交</td><td>一起提交</td></tr><tr><td>外层正常，内层异常</td><td>一起回滚</td><td><strong>内外层属于不同事务</strong><br>若外层捕获内层异常，则内层回滚，外层再提交<br>若外层没捕获内层异常，则内层回滚，外层再回滚</td><td><strong>内外层属于同一事务</strong><br>若外层捕获内层异常，则内层回滚，外层再提交<br>若外层没捕获内层异常，则内层回滚，外层再回滚</td></tr><tr><td>外层异常，内层正常</td><td>一起回滚</td><td>外层回滚，内层提交</td><td>一起回滚</td></tr><tr><td>外层异常，内层异常</td><td>一起回滚</td><td>内层先回滚，外层再回滚</td><td>一起回滚</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>半小时内搭建自己的博客</title>
    <link href="/2022/05/22/blog/"/>
    <url>/2022/05/22/blog/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该教程基于 GitHub，搭建一个 Hexo 博客。</p><p>环境：Node.js \ Git \ VSCode</p><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>点击右上角的加号，新建仓库。</p><p><img src="/images/test.png"></p><p>仓库名字格式：<code>账号名.github.io</code></p><p><img src="/images/2022-05-22-14-41-59.png"></p><p>由于我已经创建了仓库，所以会提示仓库已存在。填入仓库名称后，点击 Create repository，完成仓库的创建。</p><h2 id="拉取项目到本地"><a href="#拉取项目到本地" class="headerlink" title="拉取项目到本地"></a>拉取项目到本地</h2><p>VSCode 上新建窗口。</p><p><img src="/images/2022-05-22-14-48-37.png"></p><p>选择克隆存储库</p><p><img src="/images/2022-05-22-14-49-42.png"></p><p>将 GitHub 的仓库链接复制上去即可。</p><p><img src="/images/2022-05-22-14-52-09.png"></p><h2 id="搭建-Hexo-项目"><a href="#搭建-Hexo-项目" class="headerlink" title="搭建 Hexo 项目"></a>搭建 Hexo 项目</h2><p>在 D 盘创建空的文件夹，准备 Hexo 的项目。</p><p>打开 cmd 或 powershell，跳转到 D 盘的空文件夹下。</p><p>安装 Hexo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>初始化 Hexo 项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">hexo init<br></code></pre></td></tr></table></figure><p>安装必备的组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">npm install<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹Hexo目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>测试项目是否搭建成功。</p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs npm">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p><code>hexo g</code> 是 <code>hexo generate</code> 的缩写<br><code>hexo s</code> 是 <code>hexo server</code> 的缩写</p><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">npm run server<br></code></pre></td></tr></table></figure><p>以上两种方法效果一样。如果要停止，按下快捷键 <code>CTRL + C</code>。</p><h2 id="添加-SSH-到-Github"><a href="#添加-SSH-到-Github" class="headerlink" title="添加 SSH 到 Github"></a>添加 SSH 到 Github</h2><p>创建 SSH。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">ssh-keygen -t rsa -C &quot;youremail&quot;<br></code></pre></td></tr></table></figure><p>以记事本的方式打开 id_rsa.pub 文件。复制所有文本。</p><p>打开 Github，点击头像，打开设置。</p><p><img src="/images/2022-05-22-15-10-05.png"></p><p>点击添加新的 SSH key。</p><p><img src="/images/2022-05-22-15-11-08.png"></p><p>title 推荐使用英文，然后粘贴 id_rsa.pub 文件的所有文本到 key 上。</p><p><img src="/images/2022-05-22-15-13-13.png"></p><h2 id="将-Hexo-项目推送到-Github-上"><a href="#将-Hexo-项目推送到-Github-上" class="headerlink" title="将 Hexo 项目推送到 Github 上"></a>将 Hexo 项目推送到 Github 上</h2><p>我们要准备两个分支：主分支存储源代码，次分支存储静态 HTML 文件。</p><p>我的主分支是 main，次分支是 blog。之前拉取的分支是主分支，所以要预先创建好空白的次分支。</p><p>将 D 盘的 Hexo 项目下的所有文件复制到 vscode 上。</p><p><img src="/images/2022-05-22-15-20-55.png"></p><p>主分支可以提交，也可以不提交，因为博客的展示只需要次分支，主分支只保存源代码。</p><p>设置要部署的分支为次分支。</p><p><img src="/images/2022-05-22-15-27-13.png"></p><p>选中次分支，并保存。</p><p><img src="/images/2022-05-22-15-28-14.png"></p><p>打开 _config.yml，编辑最后一行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/你的账号名/你的账号名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">你的次分支名称</span><br></code></pre></td></tr></table></figure><p>安装 deploy-git。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>部署到 Github 上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs npm">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><p>在浏览器输入 <code>你的账号名.github.io</code> 查看自己的博客</p><p><img src="/images/2022-05-22-15-29-50.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/22/hello-world/"/>
    <url>/2022/05/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
